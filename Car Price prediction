import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
df = pd.read_csv(r'C:\Users\yashagarwal4\Desktop\data science Skillslash\Stats & ML\cars.csv', index_col = 0)
df.info()
encoder= LabelEncoder()
df['Brand'] = encoder.fit_transform(df['Brand'])
df['Model'] = encoder.fit_transform(df['Model'])
df['Fuel_Type'] = encoder.fit_transform(df['Fuel_Type'])
df['Transmission'] = encoder.fit_transform(df['Transmission'])
df['Owner_Type'] = encoder.fit_transform(df['Owner_Type'])
plt.figure(figsize= (8,5))
sns.heatmap(df.corr(), annot= True)
X = df.iloc[:,:11]
Y = df.iloc[:,-1]
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.30, random_state= 110)
scaler = StandardScaler()
scaler.fit_transform(X)
scaler.fit_transform(df)
from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(X_train, Y_train)
y_pred = model.predict(X_test)
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from warnings import filterwarnings
filterwarnings('ignore')
## MAE
mae = mean_absolute_error(Y_test,y_pred)
# Mean Squared Error (MSE)
mse = mean_squared_error(Y_test, y_pred)
print("Mean Squared Error (MSE):", mse)

# Root Mean Squared Error (RMSE)
rmse = mean_squared_error(Y_test, y_pred, squared=False)  # Setting squared=False gives RMSE
print("Root Mean Squared Error (RMSE):", rmse)

# R^2 score
r2 = r2_score(Y_test, y_pred)
print("R^2 score:", r2)
print('RMSE =:' , np.sqrt(mean_squared_error(Y_test, y_pred)))
import pickle
pickle.dump(model,open('carprediction.pkl','wb'))
loaded_model = pickle.load(open('carprediction.pkl','rb'))
loaded_model.predict(X_test)
from sklearn.ensemble import RandomForestRegressory_pred = model.predict(X_test)
model = RandomForestRegressor(n_estimators=150,random_state=33)
model.fit(X_train,Y_train)
y_pred = model.predict(X_test)
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from warnings import filterwarnings
filterwarnings('ignore')
## MAE
mae = mean_absolute_error(Y_test,y_pred)
# Mean Squared Error (MSE)
mse = mean_squared_error(Y_test, y_pred)
print("Mean Squared Error (MSE):", mse)

# Root Mean Squared Error (RMSE)
rmse = mean_squared_error(Y_test, y_pred, squared=False)  # Setting squared=False gives RMSE
print("Root Mean Squared Error (RMSE):", rmse)

# R^2 score
r2 = r2_score(Y_test, y_pred)
print("R^2 score:", r2)
print('RMSE =:' , np.sqrt(mean_squared_error(Y_test, y_pred)))
